
package jam.collect;

import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;
import java.util.function.Function;

/**
 * Implements the {@code JamTable} interface using a map for the
 * underlying storage.
 */
public class MapTable<K, V> implements JamTable<K, V> {
    /**
     * The backing map.
     */
    protected final Map<K, V> backMap;

    /**
     * The function that extracts keys from records.
     */
    protected final Function<V, K> keyFunc;

    /**
     * Creates a new table with an underlying map for storage and a
     * function to extract keys from records.
     *
     * @param backMap the backing map for record storage.
     *
     * @param keyFunc a function to extract keys from records.
     */
    public MapTable(Map<K, V> backMap, Function<V, K> keyFunc) {
        this.backMap = backMap;
        this.keyFunc = keyFunc;
    }

    /**
     * Creates a new empty map table backed by a {@code HashMap}.
     *
     * @param <K> the runtime time for the map keys.
     *
     * @param <V> the runtime time for the map values.
     *
     * @param keyFunc a function to generate keys for the records.
     *
     * @return a new empty map table with the specified key-generating
     * function.
     */
    public static <K, V> MapTable<K, V> hash(Function<V, K> keyFunc) {
        return new MapTable<K, V>(new HashMap<K, V>(), keyFunc);
    }

    /**
     * Creates a new map table backed by a {@code HashMap}.
     *
     * @param <K> the runtime time for the map keys.
     *
     * @param <V> the runtime time for the map values.
     *
     * @param records the records to store.
     *
     * @param keyFunc a function to generate keys for the records.
     *
     * @return a new map table containing the specified records with
     * keys generated by the input function.
     */
    public static <K, V> MapTable<K, V> hash(Collection<V> records, Function<V, K> keyFunc) {
        return new MapTable<K, V>(JamMaps.hash(records, keyFunc), keyFunc);
    }

    /**
     * Creates a new empty map table backed by a {@code TreeMap}.
     *
     * @param <K> the runtime time for the map keys.
     *
     * @param <V> the runtime time for the map values.
     *
     * @param keyFunc a function to generate keys for the records.
     *
     * @return a new empty map table with the specified key-generating
     * function.
     */
    public static <K, V> MapTable<K, V> tree(Function<V, K> keyFunc) {
        return new MapTable<K, V>(new TreeMap<K, V>(), keyFunc);
    }

    /**
     * Creates a new map table backed by a {@code TreeMap}.
     *
     * @param <K> the runtime time for the map keys.
     *
     * @param <V> the runtime time for the map values.
     *
     * @param records the records to store.
     *
     * @param keyFunc a function to generate keys for the records.
     *
     * @return a new map table containing the specified records with
     * keys generated by the input function.
     */
    public static <K, V> MapTable<K, V> tree(Collection<V> records, Function<V, K> keyFunc) {
        return new MapTable<K, V>(JamMaps.tree(records, keyFunc), keyFunc);
    }

    @Override public boolean contains(K key) {
        return backMap.containsKey(key);
    }

    @Override public int count() {
        return backMap.size();
    }

    @Override public void delete() {
        backMap.clear();
    }

    @Override public boolean delete(K key) {
        return backMap.remove(key) != null;
    }

    @Override public K getKey(V record) {
        return keyFunc.apply(record);
    }

    @Override public boolean insert(V record) {
        K key = getKey(record);

        if (contains(key))
            return false;

        backMap.put(getKey(record), record);
        return true;
    }

    @Override public Set<K> keys() {
        return Collections.unmodifiableSet(backMap.keySet());
    }

    @Override public Collection<V> select() {
        return Collections.unmodifiableCollection(backMap.values());
    }

    @Override public V select(K key) {
        return backMap.get(key);
    }

    @Override public boolean update(V record) {
        K key = getKey(record);

        if (!contains(key))
            return false;

        backMap.put(getKey(record), record);
        return true;
    }

    @Override public void upsert(V record) {
        backMap.put(getKey(record), record);
    }

    /**
     * Throws an {@code UnsupportedOperationException}: use
     * {@code equalsView} for equality tests.
     *
     * @throws UnsupportedOperationException in all cases.
     */
    @Override public boolean equals(Object obj) {
        throw new UnsupportedOperationException("Use TableView::equalsView for equality tests.");
    }

    /**
     * Throws an {@code UnsupportedOperationException}: tables are not
     * suitable as hash keys.
     *
     * @throws UnsupportedOperationException in all cases.
     */
    @Override public int hashCode() {
        throw new UnsupportedOperationException("Views are not suitable for hash keys.");
    }

    /**
     * Returns a string containing every mapping in this table.
     *
     * @return a string containing every mapping in this table.
     */
    @Override public String toString() {
        return backMap.toString();
    }
}
