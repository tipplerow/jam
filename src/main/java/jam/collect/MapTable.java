
package jam.collect;

import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;
import java.util.function.Function;

/**
 * Defines a mutable table of records uniquely indexed by a one-to-one
 * mapping by a primary key.
 *
 * @param <K> the runtime type of the primary table key.
 *
 * @param <V> the runtime type of the table records.
 */
public interface MapTable<K, V> extends MapView<K, V>, RecordStore<K, V> {
    /**
     * Creates a new empty map table backed by a {@code HashMap}.
     *
     * @param <K> the runtime type for the map keys.
     *
     * @param <V> the runtime type for the map values.
     *
     * @param keyFunc a function to generate keys for the records.
     *
     * @return a new empty map table with the specified key-generating
     * function.
     */
    public static <K, V> MapTable<K, V> hash(Function<V, K> keyFunc) {
        return MapCache.hash(keyFunc);
    }

    /**
     * Creates a new map table backed by a {@code HashMap}.
     *
     * @param <K> the runtime type for the map keys.
     *
     * @param <V> the runtime type for the map values.
     *
     * @param records the records to store.
     *
     * @param keyFunc a function to generate keys for the records.
     *
     * @return a new map table containing the specified records with
     * keys generated by the input function.
     */
    public static <K, V> MapTable<K, V> hash(Collection<V> records, Function<V, K> keyFunc) {
        return MapCache.hash(records, keyFunc);
    }

    /**
     * Creates a new empty map table backed by a {@code TreeMap}.
     *
     * @param <K> the runtime type for the map keys.
     *
     * @param <V> the runtime type for the map values.
     *
     * @param keyFunc a function to generate keys for the records.
     *
     * @return a new empty map table with the specified key-generating
     * function.
     */
    public static <K, V> MapTable<K, V> tree(Function<V, K> keyFunc) {
        return MapCache.tree(keyFunc);
    }

    /**
     * Creates a new map table backed by a {@code TreeMap}.
     *
     * @param <K> the runtime type for the map keys.
     *
     * @param <V> the runtime type for the map values.
     *
     * @param records the records to store.
     *
     * @param keyFunc a function to generate keys for the records.
     *
     * @return a new map table containing the specified records with
     * keys generated by the input function.
     */
    public static <K, V> MapTable<K, V> tree(Collection<V> records, Function<V, K> keyFunc) {
        return MapCache.tree(records, keyFunc);
    }
}
