
package jam.collect;

import java.util.Collection;
import java.util.TreeMap;
import java.util.function.Function;

/**
 * Implements the {@code MapTable} interface using an in-memory
 * {@code TreeMap} for record storage.
 *
 * @param <K> the runtime type of the record key.
 *
 * @param <V> the runtime type of the table records.
 */
public class TreeMapTable<K, V> extends AbstractMapTable<K, V> {
    private TreeMapTable(TreeMap<K, V> backMap, Function<V, K> keyFunc) {
        super(backMap, keyFunc);
    }

    /**
     * Creates a new empty table.
     *
     * @param <K> the runtime type for the record keys.
     *
     * @param <V> the runtime type for the record values.
     *
     * @param keyFunc a function to generate keys for the records.
     *
     * @return a new empty table with the specified key-generating
     * function.
     */
    public static <K, V> TreeMapTable<K, V> create(Function<V, K> keyFunc) {
        return new TreeMapTable<K, V>(new TreeMap<K, V>(), keyFunc);
    }

    /**
     * Creates a new table populated by a collection of records.
     *
     * @param <K> the runtime type for the record keys.
     *
     * @param <V> the runtime type for the record values.
     *
     * @param records the initial contents of the table.
     *
     * @param keyFunc a function to generate keys for the records.
     *
     * @return a new table containing the specified records with
     * keys generated by the input function.
     */
    public static <K, V> TreeMapTable<K, V> create(Collection<V> records, Function<V, K> keyFunc) {
        TreeMapTable<K, V> table = create(keyFunc);
        table.store(records);
        return table;
    }
}

