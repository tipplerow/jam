
package jam.collect;

import java.util.Collection;
import java.util.function.Function;

import com.google.common.collect.HashMultimap;
import com.google.common.collect.SetMultimap;

/**
 * Defines a mutable table of records indexed by one-to-many mapping
 * for a given key class.
 *
 * @param <K> the runtime type of the record key.
 *
 * @param <V> the runtime type of the table records.
 */
public interface MultiTable<K, V> extends MultiView<K, V>, RecordStore<V> {
    /**
     * Creates a new empty map table backed by a {@code HashMap}.
     *
     * @param <K> the runtime type for the map keys.
     *
     * @param <V> the runtime type for the map values.
     *
     * @param keyFunc a function to generate keys for the records.
     *
     * @return a new empty map table with the specified key-generating
     * function.
     */
    public static <K, V> MultiTable<K, V> hash(Function<V, K> keyFunc) {
        return MultiCache.hash(keyFunc);
    }

    /**
     * Creates a new map table backed by a {@code HashMulti}.
     *
     * @param <K> the runtime type for the map keys.
     *
     * @param <V> the runtime type for the map values.
     *
     * @param records the records to store.
     *
     * @param keyFunc a function to generate keys for the records.
     *
     * @return a new map table containing the specified records with
     * keys generated by the input function.
     */
    public static <K, V> MultiTable<K, V> hash(Collection<V> records, Function<V, K> keyFunc) {
        return MultiCache.hash(records, keyFunc);
    }
}
