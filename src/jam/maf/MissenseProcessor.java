
package jam.maf;

import java.io.PrintWriter;
import java.util.List;

import jam.app.JamApp;
import jam.app.JamProperties;
import jam.ensembl.EnsemblDb;
import jam.ensembl.EnsemblRecord;
import jam.ensembl.EnsemblTranscript;
import jam.fasta.FastaRecord;
import jam.hugo.HugoSymbol;
import jam.io.IOUtil;
import jam.lang.JamException;
import jam.peptide.Peptide;
import jam.peptide.ProteinChange;
import jam.tcga.CellFraction;
import jam.tcga.TumorBarcode;
import jam.util.ListUtil;

/**
 * Processes MAF files and generates the protein structures generated
 * by missense mutations.
 */
public final class MissenseProcessor extends JamApp {
    private final String mafFile;
    private final String fastaFile;

    private MissenseTable table;
    private PrintWriter writer;

    private final EnsemblDb ensemblDb = EnsemblDb.reference();

    private MissenseProcessor(String... propFiles) {
        super(propFiles);

        this.mafFile = MAFProperties.resolveMAFFile();
        this.fastaFile = MAFProperties.resolveFastaFile();
    }

    /**
     * Processes a MAF file and generates the protein structures
     * generated by missense mutations.
     *
     * @param propFiles files containing the system properties that
     * specify the input MAF file, output FASTA file, and all other
     * required parameters.
     *
     * @throws RuntimeException if any errors occur.
     */
    public static void run(String... propFiles) {
        MissenseProcessor processor = new MissenseProcessor(propFiles);
        processor.run();
    }

    private void run() {
        table = MissenseTable.load(mafFile);
        writer = openWriter(fastaFile);

        try {
            for (TumorBarcode barcode : table.viewBarcodes())
                processBarcode(barcode);
        }
        finally {
            IOUtil.close(writer);
        }
    }

    private void processBarcode(TumorBarcode barcode) {
        for (HugoSymbol symbol : table.viewSymbols(barcode))
            processSymbol(barcode, symbol);
    }

    private void processSymbol(TumorBarcode barcode, HugoSymbol symbol) {
        FastaRecord fastaRecord = createFastaRecord(barcode, symbol);

        writer.println(fastaRecord.format());
        writer.flush();
    }

    private FastaRecord createFastaRecord(TumorBarcode barcode, HugoSymbol symbol) {
        List<MissenseRecord> records = table.lookup(barcode, symbol);

        Peptide germline = getGermlinePeptide(records);
        Peptide mutated  = germline.mutate(getProteinChanges(records));

        MAFFastaRecord fastaRecord =
            new MAFFastaRecord(barcode, symbol, CellFraction.UNIT, mutated);

        return fastaRecord.format();
    }

    private Peptide getGermlinePeptide(List<MissenseRecord> records) {
        EnsemblTranscript transcriptID  = records.get(0).getTranscriptID();
        EnsemblRecord     ensemblRecord = ensemblDb.get(transcriptID);

        if (ensemblRecord != null)
            return ensemblRecord.getPeptide();
        else
            throw JamException.runtime("Unmapped transcript: [%s].", transcriptID.getKey());
    }

    private List<ProteinChange> getProteinChanges(List<MissenseRecord> records) {
        return ListUtil.apply(records, x -> x.getProteinChange());
    }

    public static void main(String[] args) {
        run(args);
    }
}
