
package tip.bio;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

import tip.app.TipLog;
import tip.io.ReaderUtil;

/**
 * Reads and writes FASTA files.
 */
public final class FastaFile {
    /**
     * Reads FASTA records from a file.
     *
     * @param file the file to read.
     *
     * @return a list of records read from the file.
     *
     * @throws IOException if any I/O errors occur.
     */
    public static List<FastaRecord> read(File file) throws IOException {
        return read(file, TipLog.Level.WARN);
    }

    /**
     * Reads FASTA records from a file.
     *
     * @param file the file to read.
     *
     * @param level the level for logging improperly formatted records.
     *
     * @return a list of records read from the file.
     *
     * @throws IOException if any I/O errors occur.
     */
    public static List<FastaRecord> read(File file, TipLog.Level level) throws IOException {
	List<FastaRecord> records = new ArrayList<FastaRecord>();
	Queue<String> lines = new LinkedList<String>(ReaderUtil.readLines(file));

	while (!lines.isEmpty()) {
            FastaRecord record = processRecord(lines, level);

            if (record != null)
                records.add(record);
        }

	return records;
    }

    private static FastaRecord processRecord(Queue<String> fileLines, TipLog.Level level) throws IOException {
	if (!FastaRecord.isHeaderLine(fileLines.peek()))
	    throw new IOException("Missing header line.");

	List<String> recordLines = new LinkedList<String>();
	recordLines.add(fileLines.poll());

	while (!fileLines.isEmpty() && !FastaRecord.isHeaderLine(fileLines.peek()))
	    recordLines.add(fileLines.poll());

	return FastaRecord.parseLenient(recordLines, level);
    }

    /**
     * Writes FASTA records to a file; an existing file will be
     * truncated.
     *
     * @param file the file to write.
     *
     * @param records the records to write.
     *
     * @throws IOException if any I/O errors occur.
     */
    public static void write(File file, Collection<FastaRecord> records) throws IOException {
	BufferedWriter writer = new BufferedWriter(new FileWriter(file));

	try {
	    for (FastaRecord record : records) {
		writer.write(record.format());
		writer.newLine();
	    }
	}
	finally {
	    writer.close();
	}
    }
}
